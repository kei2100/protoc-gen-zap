
{{ define "Message" }}

func (u *{{.Name}}) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if u == nil {
		return nil
	}

	{{range .Fields}}
	   {{if .Name}}
             {{if not .Redact }}
                {{if eq .Type "TYPE_DOUBLE"}}

                    {{if .FType.IsRepeated}}
                            {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendFloat64(v)

                                }
                                    return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))
                    {{else}}
                        enc.AddFloat64("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_FLOAT"}}
                    {{if .FType.IsRepeated}}
                            {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendFloat32(v)

                                }
                                    return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))
                    {{else}}
                        enc.AddFloat32("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_INT64"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendInt64(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddInt64("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_UINT64"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendUint64(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddUint64("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_INT32"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendInt32(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddInt32("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_FIXED64"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendUint64(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddUint64("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_FIXED32"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendUint32(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddUint32("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_BOOL"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendBool(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddBool("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_STRING"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendString(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddString("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_BYTES"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendByteString(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddByteString("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_UINT32"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendUint32(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddUint32("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_SFIXED32"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendInt32(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddInt32("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_SFIXED64"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendInt64(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddInt64("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_SINT32"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendInt32(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddInt32("{{.Name}}", u.{{.Accessor}})
                    {{end}}


                {{ else if eq .Type "TYPE_SINT64"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendInt64(v)

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddInt64("{{.Name}}", u.{{.Accessor}})
                    {{end}}

                {{ else if eq .Type "TYPE_MESSAGE"}}
                    {{if .FType.IsMap }}
                        // TODO optimize map value type
                        enc.AddReflected("{{.Name}}", u.{{.Accessor}})
                    {{else if .SamePackage}}
                        {{if .FType.IsRepeated}}
                            {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                    for _, v := range u.{{.Accessor}}{
                                        enc.AppendObject(v)
                                    }
                                    return nil
                                }
                                enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                        {{else}}
                            enc.AddObject("{{.Name}}", u.{{.Accessor}})
                        {{end}}

                    {{else if  eq .TypeName ".google.protobuf.Timestamp"}}
                          time{{.Name}},_ := ptypes.Timestamp(u.{{.Accessor}})
                          enc.AddTime("{{.Name}}", time{{.Name}})
                    {{else}}
                        {{if .FType.IsRepeated}}
                            {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
                                        enc.AppendObject(obj)
                                    } else {
                                        enc.AppendReflected(v)
                                    }
                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                        {{else}}
                            if obj, ok := interface{}(u.{{.Accessor}}).(zapcore.ObjectMarshaler); ok {
                                enc.AddObject("{{.Name}}", obj)
                            } else {
                                enc.AddReflected("{{.Name}}", u.{{.Accessor}})
                            }
                        {{end}}
                    {{end}}

                {{ else if eq .Type "TYPE_ENUM"}}
                    {{if .FType.IsRepeated}}
                        {{.Name}}ArrMarshaller := func (enc zapcore.ArrayEncoder) error {
                                for _, v := range u.{{.Accessor}}{
                                    enc.AppendString(v.String())

                                }
                                return nil
                            }
                            enc.AddArray("{{.Name}}", zapcore.ArrayMarshalerFunc({{.Name}}ArrMarshaller))

                    {{else}}
                        enc.AddString("{{.Name}}", u.{{.Accessor}}.String())
                    {{end}}

                {{ else }}
                    if obj, ok := interface{}(u.{{.Accessor}}).(zapcore.ObjectMarshaler); ok {
                        enc.AddObject("{{.Name}}", obj)
                    } else {
                        enc.AddReflected("{{.Name}}", u.{{.Accessor}})
                    }
                {{end}}

             {{end}}
        {{end}}

	{{end}}

	return nil
}
{{end}}
